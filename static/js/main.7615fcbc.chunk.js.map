{"version":3,"sources":["components/DisplaySide.js","components/DisplayMain.js","Calculator.js","index.js"],"names":["DisplaySide","props","res","operator","value","react_default","a","createElement","type","className","disabled","DisplayMain","id","Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeys","e","target","matches","classList","contains","handleOperator","inputDecimal","resetCalculator","resetDisplay","state","mainDisplayValue","setState","slice","concat","inputDigit","DISPLAY_MAX_NUM","DISPLAY_MAX_NUM_LENGTH","sideDisplayValue","firstNumber","waitingForSecondNumber","num","toString","length","digitsBeforeDecimal","parseInt","roomLeftForDigits","parseFloat","toFixed","number","validateNumberSize","validateNumberLength","fixNumberLength","resetMemory","digit","displayValue","result","dot","_this$state","includes","secondNumber","validateCalculation","nextOperator","_this$state2","inputValue","calculate","String","Math","sqrt","components_DisplaySide","components_DisplayMain","onClick","React","Component","ReactDOM","render","src_Calculator","document","getElementById"],"mappings":"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","file":"static/js/main.7615fcbc.chunk.js","sourcesContent":["import React from 'react';\n\nfunction DisplaySide(props) {\n  const operator = props.value;  \n  let res;\n\n  if (operator === '/') {\n    res = 'รท';\n  } else if (operator === '*') {\n    res = 'ร';\n  } else if (operator === '+') {\n    res = '+';\n  } else if (operator === '-') {\n    res = '-';\n  } else if (operator === '=') {\n    res = '=';\n  } else {\n    res = ' ';\n  }\n\n  return(<input type=\"text\" className=\"displaySide\" value={res} disabled />);\n}\n\nexport default DisplaySide;","import React from 'react';\n\nfunction DisplayMain(props) {\n  return(<input type=\"text\" id=\"display\" className=\"displayMain\" value={props.value} disabled />);\n}\n\nexport default DisplayMain;","import React from 'react';\nimport DisplaySide from './components/DisplaySide';\nimport DisplayMain from './components/DisplayMain';\n\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      DISPLAY_MAX_NUM: 9999999999,\n      DISPLAY_MAX_NUM_LENGTH: 9,\n      mainDisplayValue: '0',\n      sideDisplayValue: '',\n      firstNumber: null,\n      waitingForSecondNumber: false,\n      operator: null,\n    };\n  }\n\n  resetCalculator() {\n    this.setState({\n      mainDisplayValue: '0',\n      sideDisplayValue: '',\n      firstNumber: null,\n      waitingForSecondNumber: false,\n      operator: null,\n    });\n  }\n\n  resetDisplay() {\n    if (this.state.operator !== '=') {\n      this.setState({\n        sideDisplayValue: '',\n        mainDisplayValue: '0',\n        operator: null,\n      });\n    }\n  }\n\n  resetMemory() {\n    this.setState({\n      mainDisplayValue: '0',\n      firstNumber: null,\n      waitingForSecondNumber: false,\n      operator: null,\n    });\n  }\n\n  validateNumberSize(num) {\n\n    if (num < this.state.DISPLAY_MAX_NUM && num > -this.state.DISPLAY_MAX_NUM) {\n      return true;\n    }\n\n    return false;\n  }\n\n  validateNumberLength(num) {\n\n    if (num.toString().length <= this.state.DISPLAY_MAX_NUM_LENGTH) {\n      return true;\n    }\n\n    return false;\n  }\n\n  fixNumberLength(num) {\n\n    const digitsBeforeDecimal = parseInt(num.toString(), 10).toString().length;\n    let roomLeftForDigits = this.state.DISPLAY_MAX_NUM_LENGTH - digitsBeforeDecimal - 1;\n\n    if (roomLeftForDigits < 0) roomLeftForDigits = 0;\n\n\n    const newNum = +parseFloat(num).toFixed(roomLeftForDigits);\n\n    return newNum;\n  }\n\n  validateCalculation(num) {\n    let number = num;\n\n    if (!typeof num === 'number') {\n      number = parseFloat(num);\n    }\n\n    let res;\n\n    if (this.validateNumberSize(number)) {\n      if (this.validateNumberLength(number)) {\n        res = number;\n      } else {\n        res = this.fixNumberLength(number);\n      }\n    } else {\n      res = 'ERROR';\n      this.resetMemory();\n    }\n\n    return res;\n  }\n\n  inputDigit(digit) {\n\n    const displayValue = this.state.mainDisplayValue;\n    const DISPLAY_MAX_NUM_LENGTH = this.state.DISPLAY_MAX_NUM_LENGTH;\n    const waitingForSecondNumber = this.state.waitingForSecondNumber;\n\n\n    if (waitingForSecondNumber) {\n      this.setState({\n        mainDisplayValue: digit,\n        sideDisplayValue: ' ',\n        waitingForSecondNumber: false,\n      });\n    } else if (displayValue.length < DISPLAY_MAX_NUM_LENGTH) {\n\n      const result = displayValue === '0' ? digit : displayValue + digit;\n      this.setState({ mainDisplayValue: result });\n    }\n\n  }\n\n  inputDecimal(dot) {\n    const { mainDisplayValue, waitingForSecondNumber, DISPLAY_MAX_NUM_LENGTH } = this.state;\n    let result = mainDisplayValue;\n\n    if (waitingForSecondNumber === true) return;\n\n    if (!mainDisplayValue.includes(dot) && mainDisplayValue.length < DISPLAY_MAX_NUM_LENGTH) {\n      result += dot;\n      this.setState({ mainDisplayValue: result });\n    }\n\n  }\n\n  calculate(firstNumber, secondNumber, operator) {\n\n    let result;\n\n    switch (operator) {\n      case '/':\n        result = firstNumber / secondNumber;\n        break;\n      case '*':\n        result = firstNumber * secondNumber;\n        break;\n      case '+':\n        result = firstNumber + secondNumber;\n        break;\n      case '-':\n        result = firstNumber - secondNumber;\n        break;\n      case '=':\n        result = secondNumber;\n        break;\n      default:\n        result = false;\n        break;\n    }\n\n    return this.validateCalculation(result);\n  }\n\n  handleOperator(nextOperator) {\n    const { firstNumber, mainDisplayValue, operator, waitingForSecondNumber } = this.state;\n    const inputValue = parseFloat(mainDisplayValue);\n\n    if (nextOperator === 'root') {\n      const result = this.validateCalculation(Math.sqrt(inputValue).toString());\n\n      this.setState({\n        mainDisplayValue: result,\n        operator: null,\n        firstNumber: result,\n        waitingForSecondNumber: false,\n      });\n      return;\n    }\n\n\n    if (operator && waitingForSecondNumber) {\n      this.setState({ operator: nextOperator, sideDisplayValue: nextOperator });\n      return;\n    }\n\n    if (firstNumber === null) {\n      this.setState({ firstNumber: inputValue });\n    } else if (operator) {\n      const result = this.calculate(firstNumber, inputValue, operator);\n\n      this.setState({ mainDisplayValue: String(result), firstNumber: result });\n    }\n\n    this.setState({ waitingForSecondNumber: true, operator: nextOperator, sideDisplayValue: nextOperator });\n  }\n\n  handleKeys = (e) => {\n    const { target } = e;\n\n    if (!target.matches('button')) {\n      return;\n    }\n\n    if (target.classList.contains('operator')) {\n      this.handleOperator(target.value);\n      return;\n    }\n\n    if (target.classList.contains('decimal')) {\n      this.inputDecimal(target.value);\n      return;\n    }\n\n    if (target.classList.contains('allClear')) {\n      this.resetCalculator();\n      return;\n    }\n\n    if (target.classList.contains('clear')) {\n      this.resetDisplay();\n      return;\n    }\n\n    if (target.classList.contains('plusMinus')) {\n      if (this.state.mainDisplayValue[0] === '-' && this.state.mainDisplayValue !== '0') {\n        this.setState({ mainDisplayValue: this.state.mainDisplayValue.slice(1) });\n      } else if (this.state.mainDisplayValue !== '0') {\n        this.setState({ mainDisplayValue: `-${this.state.mainDisplayValue}` });\n      }\n      return;\n    }\n\n    this.inputDigit(target.value);\n  };\n\n\n  render() {\n    return (\n      <div className=\"Calculator\">\n\n        <div className=\"display\">\n          <DisplaySide value={this.state.sideDisplayValue} />\n          <DisplayMain value={this.state.mainDisplayValue} />\n        </div>\n\n        <div className=\"keys\" onClick={this.handleKeys}>\n          <button type=\"button\" id=\"clear\" className=\"allClear\" value=\"allClear\">AC</button>\n          <button type=\"button\" className=\"clear\" value=\"clear\">C</button>\n          <button type=\"button\" className=\"plusMinus\" value=\"plusMinus\">&plusmn;</button>\n          <button type=\"button\" className=\"root operator\" value=\"root\">&radic;</button>\n\n          <button type=\"button\" id=\"seven\" value=\"7\">7</button>\n          <button type=\"button\" id=\"eight\" value=\"8\">8</button>\n          <button type=\"button\" id=\"nine\" value=\"9\">9</button>\n          <button type=\"button\" id=\"divide\" className=\"operator\" value=\"/\">&divide;</button>\n\n\n          <button type=\"button\" id=\"four\" value=\"4\">4</button>\n          <button type=\"button\" id=\"five\" value=\"5\">5</button>\n          <button type=\"button\" id=\"six\" value=\"6\">6</button>\n          <button type=\"button\" id=\"multiply\" className=\"operator\" value=\"*\">&times;</button>\n\n\n          <button type=\"button\" id=\"one\" value=\"1\">1</button>\n          <button type=\"button\" id=\"two\" value=\"2\">2</button>\n          <button type=\"button\" id=\"three\" value=\"3\">3</button>\n          <button type=\"button\" id=\"subtract\" className=\"operator\" value=\"-\">-</button>\n\n\n          <button type=\"button\" id=\"zero\" value=\"0\">0</button>\n          <button type=\"button\" id=\"decimal\" className=\"decimal\" value=\".\">.</button>\n          <button type=\"button\" id=\"equals\" className=\"equalSign operator\" value=\"=\">=</button>\n          <button type=\"button\" id=\"add\" className=\"operator\" value=\"+\">+</button>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './Calculator';\n\nReactDOM.render(<Calculator />, document.getElementById('root'));\n"],"sourceRoot":""}